//  # Task card component logic
// task-component.js

import {renderTasks } from '/src/script/main.js';
import { TaskManager } from '/src/auth/js/task-management.js';


// New function to create a task card from task data
export async function createTaskCard(task, isSuggested) {

    try {
        const componentResponse = await fetch('src/components/task-component/html/task-component.html');
        if (!componentResponse.ok) {

            throw new Error('Failed to load task component HTML');
        }
        const componentHtml = await componentResponse.text();
        const template = document.createElement('template');
        template.innerHTML = componentHtml;
        const taskCard = template.content.querySelector('.task-card').cloneNode(true);
        
        // Ensure task properties are assigned from the data object
        taskCard.querySelector('.task-title').textContent = task.title;
        console.log("Task title:", task.title);
        
        if (!isSuggested) {
            taskCard.querySelector('.task-description').textContent = task.description;
        } else {
            taskCard.querySelector('.task-description').textContent = ''; // Empty for suggested tasks
        }
        taskCard.querySelector('.due-date').textContent = `Due: ${task.dueDate}`;

        if (isSuggested) {
            taskCard.classList.add('suggested');
            // Add suggested task buttons
            const addButton = document.createElement('button');
            addButton.className = 'btn-action add';
            addButton.innerHTML = '➕';


            const deleteButton = document.createElement('button');
            deleteButton.className = 'btn-action delete';
            deleteButton.innerHTML = '🗑️';


            // Append only add and delete buttons
            taskCard.querySelector('.task-actions').innerHTML = '';
            taskCard.querySelector('.task-actions').appendChild(addButton);
            taskCard.querySelector('.task-actions').appendChild(deleteButton);
        } else {
            // Add regular task buttons
            const taskActions = taskCard.querySelector('.task-actions') || document.createElement('div');
            taskActions.className = 'task-actions';
            taskActions.innerHTML = ''; // Clear any existing buttons

            // Create action buttons for non-suggested tasks
            const editButton = document.createElement('button');
            editButton.className = 'btn-action edit';
            editButton.innerHTML = '✏️';


            const completeButton = document.createElement('button');
            completeButton.className = 'btn-action complete';
            completeButton.innerHTML = '✅';


            const deleteButton = document.createElement('button');
            deleteButton.className = 'btn-action delete';
            deleteButton.innerHTML = '🗑️';


            taskActions.append(editButton, completeButton, deleteButton);
            taskCard.appendChild(taskActions);
        }

        handleTaskActions(taskCard); // Attach actions to the task card
        return taskCard; // Ensure this returns a DOM element
    } catch (error) {
        console.error('Error in createTaskCard:', error.message);
        console.log('Error loading task component. Please refresh the page or try again later.');
        // Return an empty div as a fallback
        return document.createElement('div');
    }
}

// Function to handle task actions
export function handleTaskActions(taskCard) {
    // Ensure taskCard is defined and is a valid DOM node
    if (!taskCard || !(taskCard instanceof Node)) {
        console.error('Invalid taskCard:', taskCard);
        return; // Exit if taskCard is not a valid DOM element
    }

    const isSuggested = taskCard.classList.contains('suggested');
    const addButton = taskCard.querySelector('.btn-action.add');
    const deleteButton = taskCard.querySelector('.btn-action.delete');
    const editButton = taskCard.querySelector('.btn-action.edit');
    const completeButton = taskCard.querySelector('.btn-action.complete');

    // Add Button (for suggested tasks)
    if (addButton && isSuggested) {
        // Use a flag to prevent multiple attachments
        if (!addButton.dataset.listenerAttached) {
            addButton.addEventListener('click', async () => {
                try {
                    taskCard.remove(); // Remove the task from the DOM
                    
                    console.log("Removing task from suggestedTasks array");
                    const taskTitle = taskCard.querySelector('.task-title').textContent;
                    TaskManager.suggestedTasks = TaskManager.suggestedTasks.filter(t => t.title !== taskTitle);
                    console.log("Suggested tasks after removal:", TaskManager.suggestedTasks);


                    console.log("Adding task to yourTasks array");
                    TaskManager.yourTasks.push({
                        title: taskTitle,
                        description: taskCard.querySelector('.task-description').textContent,
                        dueDate: taskCard.querySelector('.due-date').textContent.split(': ')[1],
                        completed: false
                    });

                    console.log("Your tasks after adding:", TaskManager.yourTasks);

                    console.log("Rendering new task in yourTasksSection");
                    const yourTasksSection = document.querySelector('.tasks-section .task-cards');
                    const newTaskCard = await createTaskCard(TaskManager.yourTasks[TaskManager.yourTasks.length - 1], false);
                    yourTasksSection.appendChild(newTaskCard);
                    handleTaskActions(newTaskCard); // Attach actions to the new task card
                    
                    console.log("Saving tasks to localStorage");
                    TaskManager.saveTasksToLocalStorage();


                    console.log("Updating task count");
                    TaskManager.updateTaskCount();


                    // Check if currently showing completed tasks and switch to "Your Tasks"
                    const isShowingCompleted = document.getElementById('show-completed').textContent.includes('Hide');
                    if (isShowingCompleted) {
                        switchTaskView(); 
                    }

                } catch (error) {
                    console.error('Error when adding a suggested task:', error);
                    console.log('An error occurred while adding the task. The action was not completed.');
                }
            });
            addButton.dataset.listenerAttached = true; // Set the flag to true after attaching
        }
    }

    // Delete Button
    if (deleteButton) {
        if (!deleteButton.dataset.listenerAttached) {
            deleteButton.addEventListener('click', () => {
                if (isSuggested) {
                    // Remove task from suggestedTasks
                    const taskTitle = taskCard.querySelector('.task-title').textContent;
                    TaskManager.suggestedTasks = TaskManager.suggestedTasks.filter(task => task.title !== taskTitle);
                    taskCard.remove(); // Remove the task card from the DOM

                } else {
                    const isShowingCompleted = document.getElementById('show-completed').textContent.includes('Hide');
                    // Update data structure before removing from DOM
                    const taskTitle = taskCard.querySelector('.task-title').textContent;
                    if (isShowingCompleted) {
                        // Remove from completedTasks
                        const index = TaskManager.completedTasks.findIndex(task => task.title === taskTitle);
                        if (index !== -1) TaskManager.completedTasks.splice(index, 1);

                    } else {
                        // Remove from yourTasks
                        const index = TaskManager.yourTasks.findIndex(task => task.title === taskTitle);
                        if (index !== -1) TaskManager.yourTasks.splice(index, 1);

                    }
                    // Remove the task card from the DOM
                    taskCard.remove();
                    // Save changes
                    TaskManager.saveTasksToLocalStorage();
                }
                // Update task count
                TaskManager.updateTaskCount();

            });
            deleteButton.dataset.listenerAttached = 'true';
        }

    }

    // Edit Button
    if (editButton && !isSuggested) {
        // Check if the listener was already attached
        if (!editButton.dataset.listenerAttached) {
            editButton.addEventListener('click', async () => {
                try {
                    const formResponse = await fetch('src/components/task-form/html/task-form.html');
                    if (!formResponse.ok) throw new Error('Failed to load form');

                    const formHtml = await formResponse.text();

                    const modalContainer = document.createElement('div');
                    modalContainer.id = 'taskFormModal';
                    modalContainer.classList.add('modal');
                    modalContainer.innerHTML = `
                        <div class="modal-content">
                            <button class="close-modal">✖</button>
                            ${formHtml}
                        </div>
                    `;
                    document.body.appendChild(modalContainer);

                    const taskForm = modalContainer.querySelector('.task-form');
                    taskForm.querySelector('input[placeholder="Task name"]').value = taskCard.querySelector('.task-title').textContent;

                    const durationText = taskCard.querySelector('.task-description').textContent.split(' ');
                    taskForm.querySelector('#duration-input').value = durationText[1];
                    taskForm.querySelector('#datepicker').value = taskCard.querySelector('.due-date').textContent.split(': ')[1];

                    const datepickerEl = modalContainer.querySelector('#datepicker');
                    $(datepickerEl).datepicker({
                        minDate: 0,
                        dateFormat: 'yy-mm-dd',
                        defaultDate: new Date()
                    });

                    const durationInput = modalContainer.querySelector('#duration-input');
                    const durationToggle = modalContainer.querySelector('#duration-toggle');
                    const durationUnits = ['Minutes', 'Hours', 'Days'];
                    let currentUnitIndex = durationUnits.indexOf(durationText[2]);

                    durationToggle.addEventListener('click', () => {
                        currentUnitIndex = (currentUnitIndex + 1) % durationUnits.length;
                        durationToggle.textContent = durationUnits[currentUnitIndex];
                        durationInput.placeholder = `Duration (${durationUnits[currentUnitIndex]})`;
                    });

                    durationToggle.textContent = durationUnits[currentUnitIndex];

                    taskForm.addEventListener('submit', (event) => {
                        event.preventDefault();

                        const taskName = taskForm.querySelector('input[placeholder="Task name"]').value;
                        const taskDuration = taskForm.querySelector('#duration-input').value;
                        const taskDate = taskForm.querySelector('#datepicker').value;

                        // Update the task in the data structure
                        const taskIndex = TaskManager.yourTasks.findIndex(t => t.title === taskCard.querySelector('.task-title').textContent);
                        if (taskIndex !== -1) {
                            TaskManager.yourTasks[taskIndex] = {
                                ...TaskManager.yourTasks[taskIndex],

                                title: taskName,
                                description: `Duration: ${taskDuration} ${durationUnits[currentUnitIndex]}`,
                                dueDate: taskDate
                            };
                        }

                        // Update DOM
                        taskCard.querySelector('.task-title').textContent = taskName;
                        taskCard.querySelector('.task-description').textContent = `Duration: ${taskDuration} ${durationUnits[currentUnitIndex]}`;
                        taskCard.querySelector('.due-date').textContent = `Due: ${taskDate}`;

                        modalContainer.remove();
                        TaskManager.saveTasksToLocalStorage(); // Save after editing
                    });


                    modalContainer.querySelector('.close-modal').addEventListener('click', () => {
                        modalContainer.remove();
                    });
                } catch (error) {
                    console.error(error.message);
                }
            });
            editButton.dataset.listenerAttached = 'true'; // Mark as handled
        }
    }

    // Complete Button
    if (completeButton && !isSuggested) {
        if (!completeButton.dataset.listenerAttached) {
            completeButton.addEventListener('click', () => {
                const isShowingCompleted = document.getElementById('show-completed').textContent.includes('Hide');

                if (!isShowingCompleted) {
                    // Find and move the task data
                    const taskIndex = TaskManager.yourTasks.findIndex(t => t.title === taskCard.querySelector('.task-title').textContent);
                    if (taskIndex !== -1) {
                        const completedTask = { ...TaskManager.yourTasks[taskIndex], completed: true };
                        TaskManager.yourTasks.splice(taskIndex, 1);

                        TaskManager.completedTasks.push(completedTask);
                        console.log('Task moved to completedTasks (See Completed Tasks):', TaskManager.completedTasks);
                        console.log('Updated yourTasks (See Your Tasks):', TaskManager.yourTasks);
                    }

                } else {
                    // Remove from completed tasks in data
                    const taskIndex = TaskManager.completedTasks.findIndex(t => t.title === taskCard.querySelector('.task-title').textContent);
                    if (taskIndex !== -1) {
                        TaskManager.completedTasks.splice(taskIndex, 1);
                    }

                    taskCard.remove(); // Remove from DOM

                }

                // Re-render the appropriate section
                const yourTasksSection = document.querySelector('.tasks-section .task-cards');
                renderTasks(isShowingCompleted ? TaskManager.completedTasks : TaskManager.yourTasks, yourTasksSection);

                // Update task count
                TaskManager.updateTaskCount();
                TaskManager.saveTasksToLocalStorage(); // Save after completing a task

            });
            completeButton.dataset.listenerAttached = 'true';
        }
    }
}
