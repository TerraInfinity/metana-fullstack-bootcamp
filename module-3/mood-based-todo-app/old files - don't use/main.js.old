//main.js
// Slider event listener remains the same with added debug

// Imports should all be at the top
import { initializeAuth } from '/src/auth/js/auth.js';
import toggleMoodSelector from '/src/components/mood-selector/js/mood-selector.js';
import { createTaskCard, handleTaskActions } from '/src/components/task-component/js/task-component.js';
import { TaskManager } from '/src/auth/js/task-management.js';


const moodIcon = document.getElementById('mood-icon');
moodIcon.addEventListener('click', toggleMoodSelector);
    
//listeners
document.addEventListener('input', (event) => {
    if (event.target.id === 'mood-range') {
        const moodValue = event.target.value;
        console.log(`Mood value changed to: ${moodValue}`);
    }
});

const themeToggle = document.getElementById('theme-toggle');
const body = document.body;
let currentMood = 50; // Default mood value
const weatherIcon = document.getElementById('weather-icon'); // Move this here

// Load saved theme
const savedTheme = localStorage.getItem('theme') || 'dark';
body.setAttribute('data-theme', savedTheme);

themeToggle.addEventListener('click', () => {
    const currentTheme = body.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    console.log(`Switching theme to: ${newTheme}`);
    body.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    themeToggle.textContent = newTheme === 'dark' ? 'ðŸŒ“' : 'ðŸŒž';
});


// Function to render tasks
export async function renderTasks(tasks, container, isSuggested = false) {
    container.innerHTML = ''; // Clear the container
    if (tasks && tasks.length > 0) {
        console.log('Rendering tasks:', tasks);
        for (const task of tasks) {
            console.log('Rendering task:', task);
            const taskCard = await createTaskCard(task, isSuggested);
            container.appendChild(taskCard);
        }
    } else {
        console.log('No tasks to render');
    }
}

// Single DOMContentLoaded event listener
document.addEventListener('DOMContentLoaded', async () => {
    // Initialize authentication and set up the login button
    initializeAuth();

    // Check if TaskManager is available before using it
    // Ensure the function is accessible globally.
    window.populateTasks = TaskManager.populateTasks;

});


// Helper function to convert data to DOM element
function createTaskElement(task) {
    const taskElement = document.createElement('div');
    taskElement.className = 'task-card';
    taskElement.innerHTML = `
        <h3 class="task-title">${task.title}</h3>
        <p class="task-description">${task.description}</p>
        <p class="due-date">Due: ${task.dueDate}</p>
    `;
    handleTaskActions(taskElement); // Attach actions to the task element
    return taskElement;
}

 

// Function to render suggested tasks
async function renderSuggestedTasks(tasks) {
    const suggestedTasksSection = document.querySelector('#suggested-tasks-section .task-cards');
    suggestedTasksSection.innerHTML = ''; // Clear existing tasks
    const taskCards = await Promise.all(tasks.map(async (task) => createTaskCard(task, true)));
    taskCards.forEach(taskCard => {
        suggestedTasksSection.appendChild(taskCard);
        handleTaskActions(taskCard);
    });
}

